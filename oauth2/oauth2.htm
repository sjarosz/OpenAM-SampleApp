<!--
DISCLAIMER: The sample code described herein is provided on an "as is" basis, without 
warranty of any kind, to the fullest extent permitted by law. ForgeRock does not warrant 
or guarantee the individual success developers may have in implementing the sample code on 
their development platforms or in production configurations.
ForgeRock does not warrant, guarantee or make any representations regarding the 
use, results of use, accuracy, timeliness or completeness of any data or information relating to the sample code. 
ForgeRock disclaims all warranties, expressed or implied, and in particular, disclaims all warranties of merchantability, 
and warranties related to the code, or any service or software related thereto.
ForgeRock shall not be liable for any direct, indirect or consequential damages or costs of any type arising 
out of any action taken by you or others related to the sample code.

-->
<html>
<head>
    <title>OAuth 2.0 Sample Application</title>
    <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
    <META HTTP-EQUIV=”CACHE-CONTROL” CONTENT=”NO-CACHE”>
    <META HTTP-EQUIV=”EXPIRES” CONTENT=”Mon, 22 Jul 2000 11:12:01 GMT”>
    <META HTTP-EQUIV=”PRAGMA” CONTENT=”NO-CACHE”>  
<!-- 
Custom Branding is located in style.css.  layout.css contains special formating.
Neither of these contain required elements for functional and can be commented out to demonstrate that fact -->
    <link rel="stylesheet" type="text/css" href="../brand/layout.css">
    <link rel="stylesheet" type="text/css" href="../brand/style.css">


    <script type="text/javascript" src="../js/config.js"></script>  
    <script type="text/javascript" src="../js/functions.js"></script>  

    <script type="text/javascript" 
            src="../js/sjcl.min.js"></script>  
  <script type="text/javascript" src="/openam/XUI/libs/jquery-2.1.1-min.js"></script>   

<!-- 
Acquire pre-existing session and check it's validity with OpenAM's Session Service
This Session Service is key to web-based single sign-on that supports notions such as sso across clustered environments, application-based session timeouts, single logout functions & maximum number of sessions a user can have simultanously all without needing to manage these conscepts in each of the target applications -->
    <script type="text/javascript">
        var s = getSessionHandle();
        var access_token;

    //Get Authenticated Session for end-user (AKA resource owner) browser
    //Three step proccess:   (1)Get Session Handle, (2) Validate Session (3)if invalid, then have user login -->
        var endpoint=getBaseURL() +"/openam/json/sessions/"+getSessionHandle()+"?_action=validate";  
            $.ajax({     // Check with OpenAM to see if session is valid
                url: endpoint,
                type: "POST",
                dataType: "json",
                accepts: "json"
            }).done(function (data) {
                 if (!data.valid) {
                    window.location.replace(AuthNUrl("realm=/"));   // Session Invalid, force login
                 }
            }).fail(function (data) {
                    console.log("Service Error");  // If repeated error something went wrong.  
            });

        var grantCode = getParameterByName("code");  //  URL in form of code=f73518e8-73a6-4311-9618-6b815ce358cd
        var client_pwd = sjcl.decrypt(application_credentials_key, enc_client_pwd);   // decrypt application client credentials

    </script>

</head>
<body>


<!-- Layout Header -->
<div id="header">  
    <table><tr>
        <td width=600><img src="../brand/logo.png" /></td>     
        <td><img src="100px-Oauth_logo.svg.png"/></td>
    </tr></table>
</div>

<!-- Layout Page -->
<div class="colmask fullpage">
    <div class="col1">
        <!-- Column 1 start -->




<!-- Info Table -->
        <h2 id="titlestat">#</h2>

<table id="hor-minimalist-a" summary="Infomation Block">

    <tbody>
      <tr >
          <td class="odd">Session Handle:</td>
            <td id="sessionHandle"> </td>

        </tr>
        <tr>
          <td class="odd">Access Token:</td>
            <td id="aToken"> </td>

        </tr>
       <tr >
          <td class="odd">Refresh Token</td>
            <td id="rToken"> </td>

        </tr>
        <tr>
          <td class="odd">Expires</td>
            <td id="expires"> </td>
        </tr>

        <tr>
          <td class="odd">Full Name</td>
            <td id="cn"> </td>
        </tr>

        <tr>
          <td class="odd">EMail</td>
            <td id="mail"> </td>
        </tr>

    </tbody>
</table>


<hr>

<!-- Show Objects -->

<br><b><a href='#' onclick=toggleDisp('resinfo2')>Click to view Access Token</a></b><br>
<span style='display:none;' id=resinfo2><textarea id="oauthToken" rows="40" cols="100">
  First try to run the following:
  1) Authorization Request
  2) Access Token Request
  3) Token Info Request
</textarea></span>


<br><b><a href='#' onclick=toggleDisp('resinfo3')>Click to view JSON Access Token Values</a></b><br>
<span style='display:none;' id=resinfo3><textarea id="json_token" rows="40" cols="100">
  First try to run the following:
  1) Authorization Request
  2) Access Token Request
  3) Token Info Request
 </textarea></span>
</b><p><p><br>

<!-- Launch Requests -->
<b>Test Authorization & Access Token:</b></br>
<!--
    POST option for authzReq() not yet implemented
<br><b><a href='#' id='oauthz_post' onClick='authzReqPost()'> Run OAuth2.0 Authorization Request (w/forced grant)</a></b></br>
-->
<br><b><a href='#' id='oauthz'> Run OAuth2.0 Authorization Request</a></b></br>                         <!-- GET: /openam/oauth2/authorize?[response_type]&[scope]&[client_id]&[redirect_uri]  -->
<br><b><a href='#' id='oaccess' onClick='accessReq()'> Run OAuth2.0 Access Token Request </a></b></br>  <!-- AUTHN+POST: /openam/oauth2/access_token?[grant_type]&[code]&[redirect_uri]  -->
<br><b><a href='#' id='otoken' onClick='tokenInfo()'> Run OAuth2.0 Token Info Request </a></b></br>     <!-- GET: /openam/oauth2/tokeninfo?[access_token] > JSON  -->

       <!-- Column 1 end -->

    </div>
</div>



<!--  Layout Footer -->
<div id="footer">
    <p>A ForgeRock Demonstration Client Application&nbsp;&nbsp|&nbsp;&nbsp
    <a href="../REST/rest.htm">OpenAM REST</a>&nbsp;&nbsp|&nbsp;&nbsp  
    <a href="../oIDc/openidc.htm">OpenID Connect</a>&nbsp;&nbsp|&nbsp;&nbsp 
    <a href="/fedlet">SAML Fedlet</a>&nbsp;&nbsp|&nbsp;&nbsp               
    <a href="../oauth2/oauth2.htm">OAuth 2.0</a>&nbsp;&nbsp|&nbsp;&nbsp
    <a href="/openam/UI/Logout">Logout</a>&nbsp;&nbsp|&nbsp;&nbsp  
    </br>
</div>




<!--   END OF PAGE - - - - - - - - - - - - - - - - - - - - - - - - - - - - - End of Page  /   Start of JavaScript Section -->
<!--   JAVASCRIPT SECTION -->

<!--  JAVASCRIPT: Set URLs -->

<script type="text/javascript">
    $("#sessionHandle").html(s);   // Display existing session handle

     $("#oauthz").attr("href", getBaseURL()+
        "/openam/oauth2/authorize"+"?response_type=code"+
        "&scope=mail%20cn%20openid"+
        "&client_id="+client_id+"&redirect_uri="+window.location.href.split('?')[0]);

     $("#logout").attr("href", getBaseURL()+"/openam/UI/Logout");


       if (/code/i.test(window.document.URL.toString())) {
          $("#titlestat").html("Client has recieved a Grant Code");
       } else {
          $("#titlestat").html("Valid OpenAM Authenticated Session");
       }
 </script>




<!-- JAVASCRIPT: Functions that execute Web Service Calls to OpenAM -->
<script type="text/javascript">

     function accessReq(){
        /**
           SOURCE: OAUTH2.0 SPEC: http://tools.ietf.org/html/rfc6749#section-4.1.3
           The client makes a request to the token endpoint by sending the
           following parameters using the "application/x-www-form-urlencoded"
           format with a character encoding of UTF-8 in the HTTP
           request entity-body:

           grant_type
                 REQUIRED.  Value MUST be set to "authorization_code".

           code
                 REQUIRED.  The authorization code received from the
                 authorization server.

           redirect_uri
                 REQUIRED, if the "redirect_uri" parameter was included in the
                 authorization request and their values MUST be identical.

           client_id
                 REQUIRED, if the client is not authenticating with the
                 authorization server.
        **/
       var endPoint = getBaseURL()+"/openam/oauth2/access_token";

        $.ajax({
            url: endPoint,
            type: "POST",
            beforeSend: function (xhr) {
                xhr.setRequestHeader("Authorization",
                        basicAuth(client_id, client_pwd));
            },
            data: {
                "grant_type": "authorization_code",
                "realm": "/",
                "code": grantCode,
                "redirect_uri": window.location.href.split('?')[0]
            },
            accepts: "json"
        }).done(function (data) {
            access_token=data.access_token;
            $("#aToken").html(data.access_token);
            $("#rToken").html(data.refresh_token);
            $("#scope").html(data.scope);
            $("#expires").html(data.expires_in);
            $("#oauthToken").html(JSON.stringify(data, undefined, 2));

        });
     }   // End of accessReq()


    function tokenInfo(){
        /**
      
        **/
       var endPoint = getBaseURL()+"/openam/oauth2/tokeninfo";

        $.ajax({
            url: endPoint,
            type: "GET",
            data: {
                "access_token": access_token

            },
            accepts: "json"
        }).done(function (data) {
            $("#aToken").html(data.access_token);
            $("#rToken").html(data.refresh_token);
            $("#cn").html(data.cn);
            $("#mail").html(data.mail);
            $("#groups").html(data.groups);
            $("#expires").html(data.expires_in);
            $("#json_token").html(JSON.stringify(data, undefined, 2));
        }).fail(function (data) {
            $("#titlestat").html("<font color=red>Token has expired</font>");
            $("#json_token").html("Access Token, no longer valid");  // Token invalid
            $("#aToken").html("");  // clear info text
            $("#rToken").html("");  // clear info text
            $("#expires").html("");  // clear info text
            $("#cn").html("");  // clear info text
            $("#mail").html("");  // clear info text
            $("#groups").html("");  // clear info text    
            $("#oaccess").attr("href", window.location.href.split('?')[0]);               
            $("#otoken").attr("href", window.location.href.split('?')[0]);       
        });
     }   // End of tokenInfo()    


/**




SOURCE: OAUTH2.0 SPEC: :http://tools.ietf.org/html/rfc6749#section-4.1.3

     +--------+                               +---------------+
     |        |--(A)- Authorization Request ->|   Resource    |
     |        |                               |     Owner     |
     |        |<-(B)-- Authorization Grant ---|               |
     |        |                               +---------------+
     |        |
     |        |                               +---------------+
     |        |--(C)-- Authorization Grant -->| Authorization |
     | Client |                               |     Server    |
     |        |<-(D)----- Access Token -------|     OpenAM    |
     |(OPENAM)|                               +---------------+
     |        |
     |        |                               +---------------+
     |        |--(E)----- Access Token ------>|    Resource   |
     |        |                               |     Server    |
     |        |<-(F)--- Protected Resource ---|     OpenAM    |
     +--------+                               +---------------+

                     OAuth 2.0 Abstract Protocol Flow

   The abstract OAuth 2.0 flow illustrated in Figure 1 describes the
   interaction between the four roles and includes the following steps:

   (A)  The client requests authorization from the resource owner.  The
        authorization request can be made directly to the resource owner
        (as shown), or preferably indirectly via the authorization
        server as an intermediary.

   (B)  The client receives an authorization grant, which is a
        credential representing the resource owner's authorization,
        expressed using one of four grant types defined in this
        specification or using an extension grant type.  The
        authorization grant type depends on the method used by the
        client to request authorization and the types supported by the
        authorization server.

   (C)  The client requests an access token by authenticating with the
        authorization server and presenting the authorization grant.

   (D)  The authorization server authenticates the client and validates
        the authorization grant, and if valid, issues an access token.

   (E)  The client requests the protected resource from the resource
        server and authenticates by presenting the access token.

   (F)  The resource server validates the access token, and if valid,
        serves the request.

   The preferred method for the client to obtain an authorization grant
   from the resource owner (depicted in steps (A) and (B)) is to use the
   authorization server as an intermediary

**/


</script>


</body>
</html>
